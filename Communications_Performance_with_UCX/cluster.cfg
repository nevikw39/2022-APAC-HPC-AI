################################################################################
#                       User directories - Must be adjusted!                   #
################################################################################
# Replace PROJECT_NAME with the another project, if you want to store files
# under a different project's storage unit rather than your primary project,
# e.g., 'public'.
export PROJECT_NAME=${PROJECT}

# Define scratch directory, must be user-writable and accessible in all compute
# nodes.
export SCRATCH=/scratch/${PROJECT_NAME}/${USER}

# Define job output directory, where server logs (server-$HOSTNAME.out is where
# performance results are stored!) and worker logs in case something went wrong.
# WARNING: All files are deleted when this script is executed again.
export JOB_DIR=${SCRATCH}/job-out

# Results directory, written when WRITE_BASELINE=true, later used to verify
# correctness with VERIFY_BASELINE=true.
export BASELINE_DIR=${SCRATCH}/baseline

# The directory where this application is, must be accessible in all compute
# nodes, but does not need write access.
export TEST_DIR=${SCRATCH}/2022-APAC-HPC-AI/Communications_Performance_with_UCX


################################################################################
#                   Problem parameters - Must be adjusted                      #
################################################################################
# Number of iterations to run. The final submission will be tested with 100
# iterations for performance check, and 5 iterations for correctness check.
export NUM_ITERATIONS=10

# The size of each chunk. The small problem will use a size of 1_000_000
# (1 million rows per device) and the large problem will use a size of
# 25_000_000 (25 million rows per device).
export CHUNK_SIZE=1_000_000

# Write baseline to ${BASELINE_DIR}. This should be run once with the original,
# unmodified setup, the results will be written to disk and later can be used
# as baseline to verify correctness of your changes with VERIFY_BASELINE=true.
# Valid options: `true` or `false` (without the ` character).
export WRITE_BASELINE=true

# Verify results with baseline previously stored in ${BASELINE_DIR}.
# Valid options: `true` or `false` (without the ` character)
export VERIFY_RESULTS=false


################################################################################
#               Other defaults -- shouldn't be necessary to change             #
################################################################################
# Interface where to bind processes
export LISTEN_INTERFACE="ib0"

# Avoid scheduler restart to block on port TIME_WAIT when using UCX's TCP CM
export UCX_TCP_CM_REUSEADDR=y

# Avoid OpenBLAS oversubscription of threads
export OPENBLAS_NUM_THREADS=1

################################################################################
#                                 Team  NTHU-1                                 #
################################################################################

export UCX_RNDV_SCHEME=am

export UCX_RC_TM_ENABLE=y
export UCX_DC_TM_ENABLE=y

export UCX_MEMTYPE_CACHE=y

export UCX_IB_GPU_DIRECT_RDMA=y

export UCX_RNDV_THRESH=1024

export UCXPY_NON_BLOCKING_MODE=1

export UCX_TCP_TX_SEG_SIZE=64k
export UCX_TCP_RX_SEG_SIZE=512k

export UCX_USE_MT_MUTEX=y

